'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var VERSION = exports.VERSION = '0.5.0';

var DEFAULT_LEVEL = 0;

var COLORS = {
  CURIOUS_BLUE: '#268BD2',
  TRADE_WIND_GREEN: '#63ADA8',
  GIMBLET_YELLOW: '#BEA85F',
  MY_PINK: '#DF8984'
};

var BROWSER = {
  IS_CHROME: /Chrome/.test(navigator.userAgent),
  IS_EXPLORER: navigator.userAgent.indexOf('MSIE') > -1,
  IS_FIREFOX: navigator.userAgent.indexOf('Firefox') > -1,
  IS_SAFARI: /Version/.test(navigator.userAgent)
};

var ICON = {
  INFO: 'https://d2mxuefqeaa7sj.cloudfront.net/s_B42BBC2344C9BB2EE28870D2EBB8AB9BA1BF5601EC50F1AABC788C3099EB7784_1494522371868_icon-info.svg',
  DEBUG: 'https://d2mxuefqeaa7sj.cloudfront.net/s_B42BBC2344C9BB2EE28870D2EBB8AB9BA1BF5601EC50F1AABC788C3099EB7784_1494522371864_icon-bug.svg',
  WARN: 'https://d2mxuefqeaa7sj.cloudfront.net/s_B42BBC2344C9BB2EE28870D2EBB8AB9BA1BF5601EC50F1AABC788C3099EB7784_1494522371870_icon-warning.svg',
  ERROR: 'https://d2mxuefqeaa7sj.cloudfront.net/s_B42BBC2344C9BB2EE28870D2EBB8AB9BA1BF5601EC50F1AABC788C3099EB7784_1494522371866_icon-error.svg'
};

var logConfig = {
  info: {
    color: COLORS.CURIOUS_BLUE,
    value: '1',
    icon: ICON.INFO
  },
  debug: {
    color: COLORS.TRADE_WIND_GREEN,
    value: '0',
    icon: ICON.DEBUG
  },
  warn: {
    color: COLORS.GIMBLET_YELLOW,
    value: '2',
    icon: ICON.WARN
  },
  error: {
    color: COLORS.MY_PINK,
    value: '3',
    icon: ICON.ERROR
  }
};

var setSafariStyleSetOne = function setSafariStyleSetOne(_ref) {
  var icon = _ref.icon;
  return ['background-image: url( ' + icon + ' )', 'background-repeat: no-repeat', 'background-size: 15px 15px', 'padding-left: 15.2px'].join(';');
};

var setSafariStyleSetTwo = function setSafariStyleSetTwo(_ref2) {
  var color = _ref2.color;
  return ['color: ' + color, 'font-weight: bold', 'display: block', 'padding-left: 15.2px', 'padding-top: .4px'].join(';');
};

var setChromeStyleSetOne = function setChromeStyleSetOne(_ref3) {
  var icon = _ref3.icon,
      color = _ref3.color;
  return ['background-image: url(' + icon + ') ', 'background-repeat: no-repeat', 'background-size: 13px 13px', 'color: ' + color + ' ', 'font-weight: bold', 'display: block', 'margin-left: 5px', 'padding-left: 18px'].join(';');
};

var setFirefoxStyleSetOne = function setFirefoxStyleSetOne(_ref4) {
  var color = _ref4.color;
  return ['color: ' + color + ' ', 'font-weight: bold', 'display: block', 'margin-left: -6px'].join(';');
};

function isNode() {
  return typeof module !== 'undefined' && typeof module.exports !== 'undefined';
}

function isBrowser() {
  return typeof window !== 'undefined';
}

function isSafeMode() {
  return BROWSER.IS_FIREFOX || BROWSER.IS_EXPLORER;
}

var styleMessage = function styleMessage(string, level) {
  var msg = void 0;
  var styleSetOne = void 0;
  var styleSetTwo = void 0;
  var icon = logConfig[level].icon;
  var color = logConfig[level].color;

  switch (true) {
    case BROWSER.IS_SAFARI:
      msg = '%c %c ' + string + ' ';
      styleSetOne = setSafariStyleSetOne({ icon: icon });
      styleSetTwo = setSafariStyleSetTwo({ color: color });

      return [msg, styleSetOne, styleSetTwo];

    case BROWSER.IS_CHROME:
      msg = '%c ' + string + ' ';
      styleSetOne = setChromeStyleSetOne({ icon: icon, color: color });

      return [msg, styleSetOne];

    case BROWSER.IS_FIREFOX:
      msg = '%c ' + string + ' ';
      styleSetOne = setFirefoxStyleSetOne({ icon: icon });

      return [msg, styleSetOne];

    default:
      console.error('pretty-logs could not identify browser');
      break;
  }
};

var setDateTime = function setDateTime() {
  var timestamp = new Date();
  var date = timestamp.toLocaleDateString();
  var time = timestamp.toLocaleTimeString();
  var dateTime = date + ', ' + time + ' ';

  return dateTime;
};

var log = function log(subject, details, type) {
  var _console;

  (_console = console)[type].apply(_console, _toConsumableArray(subject));
  console.log(details);
  if (type === 'groupCollapsed') {
    console.groupEnd();
  } else {
    console.log('');
  }
};

var plog = function plog(_ref5) {
  var level = _ref5.level,
      message = _ref5.message,
      extra = _ref5.extra;

  var _msg = setDateTime() + ' - message';
  var subject = styleMessage(_msg, level);
  var details = { level: level, message: message, extra: extra };

  if (isBrowser() && isSafeMode()) {
    log(subject, details, 'log');
  } else if (isBrowser()) {
    log(subject, details, 'groupCollapsed');
  } else {
    console.error('pretty-logs does not recognize this environment');
  }
};

exports.default = plog;